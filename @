"""Configuration management for the trading system."""
import os
from dhanhq import DhanContext
from pathlib import Path
from typing import Optional
from dotenv import load_dotenv

# Load environment variables
load_dotenv()

# Base paths
BASE_DIR = Path(__file__).parent.parent
DATA_DIR = BASE_DIR / "data"
LOGS_DIR = BASE_DIR / "logs"

# Ensure directories exist
DATA_DIR.mkdir(exist_ok=True)
LOGS_DIR.mkdir(exist_ok=True)


class Config:
    """Main configuration class."""
    
    # API Configuration
    DHAN_CLIENT_ID: str = os.getenv("DHAN_CLIENT_ID", "")
    DHAN_ACCESS_TOKEN: str = os.getenv("DHAN_ACCESS_TOKEN", "")
    OPENAI_API_KEY: str = os.getenv("OPENAI_API_KEY", "")
    OPENAI_MODEL: str = os.getenv("OPENAI_MODEL", "gpt-4-turbo-preview")
    
    # Environment
    USE_SANDBOX: bool = os.getenv("USE_SANDBOX", "true").lower() == "true"
    
    USE_BACKTEST_MODE: bool = False
    BACKTEST_FROM: str = "2025-10-01"
    BACKTEST_TO: str = "2025-10-17"
    
    # Trading Parameters
    RISK_REWARD_RATIO: float = float(os.getenv("RISK_REWARD_RATIO", "3.0"))
    MAX_RISK_PERCENTAGE: float = float(os.getenv("MAX_RISK_PERCENTAGE", "2.0"))
    MIN_PROBABILITY_THRESHOLD: float = float(os.getenv("MIN_PROBABILITY_THRESHOLD", "80.0"))
    
    # Order Execution Settings
    ORDER_QUANTITY = 1
    USE_SUPER_ORDER = True
    NO_TRADES_ON_EXPIRY = True

    # Timeframes
    ZONE_TIMEFRAME: int = int(os.getenv("ZONE_TIMEFRAME", "15"))
    TRADE_TIMEFRAME: int = int(os.getenv("TRADE_TIMEFRAME", "5"))
    ZONE_REFRESH_INTERVAL: int = int(os.getenv("ZONE_REFRESH_INTERVAL", "15"))

    # ==================== INSTRUMENT SELECTION ====================
    # User can select: NIFTY or BANKNIFTY
    SELECTED_INSTRUMENT: str = os.getenv("SELECTED_INSTRUMENT", "NIFTY")
    
    # Nifty Configuration
    NIFTY_CONFIG = {
        "symbol": "NIFTY",
        "name": "Nifty 50",
        "index_security_id": 13,
        "futures_security_id": int(os.getenv("NIFTY_FUTURES_SECURITY_ID", "37054")),
        "exchange": "NSE_FNO",
        "index_exchange": "IDX_I",
        "expiry_day": "TUESDAY",  # Nifty weekly expiry
        "expiry_type": "WEEKLY",
        "lot_size": 25,
    }
    
    # BankNifty Configuration
    BANKNIFTY_CONFIG = {
        "symbol": "BANKNIFTY",
        "name": "Bank Nifty",
        "index_security_id": 25,
        "futures_security_id": int(os.getenv("BANKNIFTY_FUTURES_SECURITY_ID", "52175")),
        "exchange": "NSE_FNO",
        "index_exchange": "IDX_I",
        "expiry_day": "LAST_TUESDAY",  # BankNifty monthly expiry (last Tuesday)
        "expiry_type": "MONTHLY",
        "lot_size": 15,
    }
    
    # ==================== THETA DECAY SETTINGS ====================
    # Maximum theta impact allowed (%)
    MAX_THETA_IMPACT_PERCENTAGE: float = float(os.getenv("MAX_THETA_IMPACT_PERCENTAGE", "5.0"))

    # Expected holding time for intraday trades (hours)
    EXPECTED_HOLD_HOURS: float = float(os.getenv("EXPECTED_HOLD_HOURS", "3.0"))
    
    # Get active instrument config
    @classmethod
    def get_active_instrument(cls):
        """Get configuration for currently selected instrument."""
        if cls.SELECTED_INSTRUMENT == "BANKNIFTY":
            return cls.BANKNIFTY_CONFIG
        else:
            return cls.NIFTY_CONFIG
    
    # ==================== EXPIRY DAY CHECK ====================
    @classmethod
    def is_expiry_day(cls) -> bool:
        """
        Check if today is expiry day for the selected instrument.
        
        Returns:
            bool: True if today is expiry day
        """
        from datetime import datetime
        import calendar
        from src.utils.logger import log
        
        today = datetime.now()
        weekday = today.weekday()  # Monday=0, Tuesday=1, ..., Sunday=6
        
        instrument = cls.get_active_instrument()
        expiry_type = instrument.get("expiry_type", "WEEKLY")
        
        if expiry_type == "WEEKLY":
            # Nifty: Weekly expiry on Tuesday
            # Tuesday = 1
            is_expiry = (weekday == 1)
            log.info(f"ðŸ“… Weekly expiry check ({instrument['name']}): Today is {'Tuesday (EXPIRY)' if is_expiry else 'not Tuesday'}")
            return is_expiry
            
        elif expiry_type == "MONTHLY":
            # BankNifty: Monthly expiry on last Tuesday
            # Tuesday = 1
            if weekday != 1:  # Not Tuesday
                return False
            
            # Check if this is the last Tuesday of the month
            last_day = calendar.monthrange(today.year, today.month)[1]
            
            # Calculate days until next Tuesday
            days_until_next_tuesday = (1 - weekday) % 7
            if days_until_next_tuesday == 0:
                days_until_next_tuesday = 7
            
            next_tuesday = today.day + days_until_next_tuesday
            
            is_last_tuesday = next_tuesday > last_day
            
            log.info(f"ðŸ“… Monthly expiry check ({instrument['name']}): Today is Tuesday, last Tuesday of month: {is_last_tuesday}")
            return is_last_tuesday
        
        return False
    
    # ==================== DYNAMIC INSTRUMENT PROPERTIES ====================
    @property
    def INSTRUMENT_SYMBOL(self):
        return self.get_active_instrument()["symbol"]
    
    @property
    def INSTRUMENT_NAME(self):
        return self.get_active_instrument()["name"]
    
    @property
    def INSTRUMENT_INDEX_SECURITY_ID(self):
        return self.get_active_instrument()["index_security_id"]
    
    @property
    def INSTRUMENT_FUTURES_SECURITY_ID(self):
        return self.get_active_instrument()["futures_security_id"]
    
    @property
    def INSTRUMENT_EXCHANGE(self):
        return self.get_active_instrument()["exchange"]
    
    @property
    def INSTRUMENT_INDEX_EXCHANGE(self):
        return self.get_active_instrument()["index_exchange"]
    
    @property
    def INSTRUMENT_EXPIRY_DAY(self):
        return self.get_active_instrument()["expiry_day"]
    
    @property
    def INSTRUMENT_EXPIRY_TYPE(self):
        return self.get_active_instrument()["expiry_type"]
    
    @property
    def INSTRUMENT_LOT_SIZE(self):
        return self.get_active_instrument()["lot_size"]
    
    # ==================== LEGACY COMPATIBILITY (Keep for now) ====================
    # These will use the selected instrument dynamically
    @property
    def NIFTY_FUTURES_SECURITY_ID(self):
        return str(self.INSTRUMENT_FUTURES_SECURITY_ID)
    
    @property
    def NIFTY_FUTURES_EXCHANGE(self):
        return self.INSTRUMENT_EXCHANGE
    
    @property
    def NIFTY_INDEX_SECURITY_ID(self):
        return self.INSTRUMENT_INDEX_SECURITY_ID
    
    @property
    def NIFTY_INDEX_EXCHANGE(self):
        return self.INSTRUMENT_INDEX_EXCHANGE
    
    @property
    def ANALYSIS_INSTRUMENT_TYPE(self):
        return "FUTIDX"  # Same for both Nifty and BankNifty
    
    @property
    def NIFTY_SYMBOL(self):
        return self.INSTRUMENT_NAME
    
    # Technical Indicators
    VP_SESSIONS: int = int(os.getenv("VP_SESSIONS", "24"))
    VP_VALUE_AREA: float = float(os.getenv("VP_VALUE_AREA", "70"))
    OB_LOOKBACK: int = int(os.getenv("OB_LOOKBACK", "20"))
    FVG_MIN_SIZE: float = float(os.getenv("FVG_MIN_SIZE", "0.001"))
    
    RSI_PERIOD: int = int(os.getenv("RSI_PERIOD", "14"))
    RSI_OVERBOUGHT: float = float(os.getenv("RSI_OVERBOUGHT", "70"))
    RSI_OVERSOLD: float = float(os.getenv("RSI_OVERSOLD", "30"))
    
    BB_PERIOD: int = int(os.getenv("BB_PERIOD", "20"))
    BB_STD_DEV: float = float(os.getenv("BB_STD_DEV", "2"))
    
    # Pattern Detection
    ENABLE_CANDLESTICK_PATTERNS: bool = True
    ENABLE_CHART_PATTERNS: bool = True
    MIN_PATTERN_CONFIDENCE: float = 70.0
    
    # Logging
    LOG_LEVEL: str = os.getenv("LOG_LEVEL", "INFO")
    LOG_FILE: Path = LOGS_DIR / os.getenv("LOG_FILE", "trading_agent.log")
    
    # Database
    DATABASE_URL: str = os.getenv("DATABASE_URL", f"sqlite:///{DATA_DIR}/trades.db")
    
    # Streamlit
    STREAMLIT_SERVER_PORT: int = int(os.getenv("STREAMLIT_SERVER_PORT", "8501"))
    STREAMLIT_SERVER_ADDRESS: str = os.getenv("STREAMLIT_SERVER_ADDRESS", "0.0.0.0")
    
    # ==================== DHAN CREDENTIALS ====================
    # Load from persistent store first, fallback to .env
    @classmethod
    def _load_dhan_credentials(cls):
        """Load Dhan credentials from store or .env."""
        from src.utils.credentials_store import credentials_store
        from src.utils.logger import log
        # Try loading from persistent store first
        stored_creds = credentials_store.get_dhan_credentials()

        if stored_creds:
            log.info("ðŸ”‘ Using Dhan credentials from persistent storage")
            cls.DHAN_CLIENT_ID = stored_creds['client_id']
            cls.DHAN_ACCESS_TOKEN = stored_creds['access_token']
        else:
            # Fallback to .env
            log.info("ðŸ”‘ Using Dhan credentials from .env (fallback)")
            cls.DHAN_CLIENT_ID = os.getenv("DHAN_CLIENT_ID", "")
            cls.DHAN_ACCESS_TOKEN = os.getenv("DHAN_ACCESS_TOKEN", "")


    @classmethod
    def get_dhan_context(cls):
        """Return a reusable DhanContext object."""
        return DhanContext(cls.DHAN_CLIENT_ID, cls.DHAN_ACCESS_TOKEN)
    
    @classmethod
    def validate(cls) -> bool:
        """Validate configuration."""
        required_fields = [
            ("DHAN_CLIENT_ID", cls.DHAN_CLIENT_ID),
            ("DHAN_ACCESS_TOKEN", cls.DHAN_ACCESS_TOKEN),
            ("OPENAI_API_KEY", cls.OPENAI_API_KEY),
        ]
        
        missing = [name for name, value in required_fields if not value]
        
        if missing:
            raise ValueError(f"Missing required configuration: {', '.join(missing)}")
        
        return True

# ==================== INITIALIZE CREDENTIALS ====================
# Call this AFTER the class is fully defined
Config._load_dhan_credentials()

# Global config instance
config = Config()

